const char Texturemap_3Channel_fragment[] =
    "/*\n"
    "* Neocortex Fragmet shader:\n"
    "*\n"
    "* tbd\n"
    "*/\n"
    "\n"
    "#if 1\n"
    "/*\n"
    "* Precision definition for the shader:\n"
    "* (Valid for GLES2, and GL shading language >= 1.30)\n"
    "*/\n"
    "#if defined(GL_ES) || (__VERSION__ >= 130)\n"
    "precision mediump float;\n"
    "#endif\n"
    "\n"
    "\n"
    "/*\n"
    "* Varying input params form vertex shader:\n"
    "*/\n"
    "varying vec2 v_Texcoord;\n"
    "\n"
    "/*\n"
    "* Samplers:\n"
    "*/\n"
    "uniform sampler2D s_Texture0; // Basemap\n"
    "uniform sampler2D s_Texture1; // Not used here\n"
    "uniform sampler2D s_Texture2; // Not used here\n"
    "uniform sampler2D s_Texture3; // Not used here\n"
    "\n"
    "uniform vec4 u_Ambient;\n"
    "uniform vec4 u_Diffuse;\n"
    "uniform vec4 u_Specular;\n"
    "uniform vec4 u_Emissive;\n"
    "uniform float u_SpecularPower;\n"
    "\n"
    "void main()\n"
    "{\n"
    "gl_FragColor = texture2D(s_Texture0, v_Texcoord);\n"
    "}\n"
    "#else\n"
    "\n"
    "#if defined(GL_ES) || (__VERSION__ >= 130)\n"
    "precision mediump float;\n"
    "#endif\n"
    "\n"
    "uniform vec4 u_Ambient;\n"
    "uniform vec4 u_Diffuse;\n"
    "uniform vec4 u_Specular;\n"
    "uniform float u_specularPower;\n"
    "\n"
    "uniform sampler2D s_Texture0;       // Basemap\n"
    "uniform sampler2D s_Texture1;       // Specular (not used)\n"
    "uniform sampler2D s_Texture2;       // Normal\n"
    "uniform sampler2D s_Texture3;       // -- not used --\n"
    "\n"
    "varying vec2 v_Texcoord;\n"
    "varying vec3 v_viewDirection;\n"
    "varying vec3 v_lightDirection;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "vec4 baseColor = texture2D(s_Texture0, v_Texcoord);\n"
    "\n"
    "vec3 normal = texture2D(s_Texture2, v_Texcoord);\n"
    "\n"
    "normal = normalize(normal * 2.0 - 1.0);\n"
    "\n"
    "vec3 lightDirection = normalize(v_lightDirection);\n"
    "vec3 viewDirection = normalize(v_viewDirection);\n"
    "\n"
    "float nDotL = dot(normal, lightDirection);\n"
    "\n"
    "vec3 reflection = (2.0 * normal * nDotL) - reflection;\n"
    "\n"
    "float rDotV = max(0.0, dot(reflection, viewDirection));\n"
    "\n"
    "vec4 ambient = u_Diffuse * nDotL * baseColor;\n"
    "\n"
    "vec4 specular = u_Specular * pow(rDotV, u_specularPower);\n"
    "\n"
    "gl_FragColor = ambient + diffuse + specular;\n"
    "}\n"
    "\n"
    "#endif\n";
