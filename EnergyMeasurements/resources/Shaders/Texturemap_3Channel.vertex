#if 1
/*
 * Neocortex Vertex shader
 *
 * Shaders which are applied to world objects, are assumed to be
 * rendered through user definable camera. Hence, the API defines
 * there shall be at least one Uniform defined, which is the
 * world tranformation matrix. The matrix can be used to transform
 * local vertices of the object into the World coordinates.
 *
 * Input attributes for the shader are as follows:
 *  0: Vertices, named as a_Position
 *  1: Texcoords, names as a_Texcoord
 *  2: Normals, named as a_Normal
 *  3: Color, named as a_color
 */

/*
 * Attributes:
 */
attribute vec4 a_Position;
attribute vec2 a_Texcoord;
attribute vec3 a_Normal;
attribute vec3 a_Color;

/*
 * Uniforms:
 */
uniform mat4 u_WorldTransform;

/*
 * Varying outputs, for the fragment shader:
 */
varying vec2 v_Texcoord;

void main()
{
    gl_Position = u_WorldTransform * a_Position;
    v_Texcoord = a_Texcoord;
}
#else

// OpenGL ES 2.0 book samples, Chapter 13, Per fragment lighting

uniform mat4 u_matViewinverse;  // Puuttuu
uniform mat4 u_WorldTransform;
uniform vec3 u_lightposition;   // Puuttuu
uniform vec3 u_eyeposition;     // Puuttuu

varying vec2 v_Texcoord;
varying vec3 v_viewDirection;
varying vec3 v_lightDirection;

attribute vec4 a_Position;
attribute vec2 a_Texcoord;
attribute vec3 a_Normal;        // ?? entä jos ei ole meshissä?

attribute vec3 a_Binormal;      // Puuttuu
attribute vec3 a_Tangent;       // Puuttuu

void main(void)
{
    vec3 eyePositionWorld = (u_matViewInverse * vec4(u_eyeposition, 1.0)).xyz;

    vec3 viewDirectionWorld = eyePositionWorld - a_Position.xyz;

    vec3 lightPositionWorld = (u_maxViewInverse * vec4(u_lightPosition, 1.0)).xyz;

    vec3 lightDirectionWorld = lightPositionWorld - a_Position.xyz;

    mat3 tangentMat = mat3(a_Tangent, a_Binormal, a_Normal);

    v_viewDirection = viewDirectionWorld * tangentMat;

    v_lightDirection = lightDirectionWorld * tangentMat;

    gl_Position = u_WorldTransform * a_Position;

    v_Texcoord = a_Texcoord.xy;
}

#endif
